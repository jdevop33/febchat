import fs from 'node:fs';
import path from 'node:path';
import * as https from 'node:https';

// Function to fetch HTML content from URL
const fetchHtml = async (url: string): Promise<string> => {
  return new Promise((resolve, reject) => {
    https.get(url, (response) => {
      if (response.statusCode !== 200) {
        reject(new Error(`Failed to fetch ${url}: ${response.statusCode}`));
        return;
      }

      let data = '';
      response.on('data', (chunk) => {
        data += chunk;
      });
      response.on('end', () => {
        resolve(data);
      });
    }).on('error', (err) => {
      reject(err);
    });
  });
};

// Interface for bylaw data
interface BylawData {
  number: string;
  title: string;
  url: string;
}

// Function to extract bylaw data from HTML
const extractBylawData = (html: string): BylawData[] => {
  const bylaws: BylawData[] = [];
  
  // Table row pattern
  const rowRegex = /<tr[^>]*>\s*<td[^>]*>(\d{4})<\/td>\s*<td[^>]*>([^<]+)<\/td>\s*<td[^>]*><a[^>]*href="([^"]+)"[^>]*>View<\/a><\/td>\s*<\/tr>/g;
  
  let match: RegExpExecArray | null = null;
  
  // eslint-disable-next-line no-cond-assign
  while (match = rowRegex.exec(html)) {
    const number = match[1];
    const title = match[2].trim();
    const url = match[3];
    
    bylaws.push({ number, title, url });
  }
  
  return bylaws;
};

// Main function
const scrapeAndGenerateMaps = async () => {
  try {
    // URL of the bylaws page
    const url = 'https://www.oakbay.ca/council-administration/bylaws-policies/oak-bay-municipal-bylaws';
    
    console.log(`Fetching bylaws from ${url}...`);
    const html = await fetchHtml(url);
    
    console.log('Extracting bylaw data...');
    const bylaws = extractBylawData(html);
    
    if (bylaws.length === 0) {
      console.error('No bylaws found! The page structure may have changed.');
      return;
    }
    
    console.log(`Found ${bylaws.length} bylaws.`);
    
    // Generate maps
    const knownBylawUrls: Record<string, string> = {};
    const bylawTitleMap: Record<string, string> = {};
    
    bylaws.forEach(bylaw => {
      knownBylawUrls[bylaw.number] = bylaw.url;
      bylawTitleMap[bylaw.number] = bylaw.title;
    });
    
    // Combine with our existing manual data
    // Add any important bylaws that might be missed by the scraper
    const manualBylaws: BylawData[] = [
      { 
        number: "4247", 
        title: "Building and Plumbing Bylaw", 
        url: "https://www.oakbay.ca/wp-content/uploads/2024/03/4247-Building-and-Plumbing-Bylaw-2005-CONSOLIDATED.pdf" 
      },
      { 
        number: "4742", 
        title: "Tree Protection Bylaw", 
        url: "https://www.oakbay.ca/wp-content/uploads/2024/01/4742-Tree-Protection-Bylaw-2020-CONSOLIDATED.pdf" 
      }
    ];
    
    manualBylaws.forEach(bylaw => {
      // Only add if not already scraped
      if (!knownBylawUrls[bylaw.number]) {
        knownBylawUrls[bylaw.number] = bylaw.url;
        bylawTitleMap[bylaw.number] = bylaw.title;
      }
    });
    
    // Write output file
    const fileContent = `// Auto-generated bylaw URL and title mappings
// Generated on ${new Date().toISOString()}
// Do not edit manually - use scrape-bylaw-urls.ts to update

export const knownBylawUrls: Record<string, string> = ${JSON.stringify(knownBylawUrls, null, 2)};

export const bylawTitleMap: Record<string, string> = ${JSON.stringify(bylawTitleMap, null, 2)};

// List of all known bylaw numbers
export const VALIDATED_BYLAWS: string[] = ${JSON.stringify(Object.keys(knownBylawUrls), null, 2)};
`;

    // Write to lib/utils/bylaw-maps.ts
    const outputPath = path.resolve(__dirname, '../lib/utils/bylaw-maps.ts');
    fs.writeFileSync(outputPath, fileContent);
    
    console.log(`Bylaw maps written to ${outputPath}`);
    console.log(`Generated maps for ${Object.keys(knownBylawUrls).length} bylaws`);
    
  } catch (error) {
    console.error('Error scraping bylaw data:', error);
  }
};

// Run the scraper
scrapeAndGenerateMaps();